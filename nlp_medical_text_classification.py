# -*- coding: utf-8 -*-
"""NLP Medical Text classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151PmB7J9kHwHg1jz0x_HutwRoQ6PVk_u

Import Dependencies
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
import nltk
import re
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
nltk.download('stopwords')
nltk.download('punkt')

"""csv to dataframe"""

df = pd.read_csv(r"C:\Users\SASUB\Downloads\refined_medical_dataset.csv")

df.head()

print(df['label'].value_counts())

df.shape

empty_rows = df[df.isnull().all(axis = 1)]
print(empty_rows)

def clean_text(text):
  text = text.lower()
  text_removed = re.sub(r'[^a-z\s]', '', text)
  words = text_removed.split()

  filtered = [word for word in words if word not in stopwords.words('english')]

  return ' '.join(filtered)

df['cleaned_text'] = df['text'].apply(clean_text)

df.head()

vectorizer = TfidfVectorizer(max_features = 5000)
x = vectorizer.fit_transform(df['cleaned_text'])
y = df['label']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

y_label = df['label'].unique()
print(y_label)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
model = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')
model.fit(x_train, y_train)

x_train_pred = model.predict(x_train)
training_accuracy = accuracy_score(x_train_pred, y_train)

print('training data accuracy', training_accuracy)

y_test_pred = model.predict(x_test)
test_accuracy = accuracy_score(y_test_pred, y_test)
print('test data accuracy', test_accuracy)

"""Model deployment"""

import joblib

joblib.dump(model, 'medical_model.pkl')
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

def text_classification(input_data):
  #input_data = ("the patient is diagnosed with cancer")
  #step 1: preprocess text data
  cleaned = clean_text(input_data)

  #step 2: text to vector
  input_vector = vectorizer.transform([cleaned])  # Must be a list

  # Step 3: Predict using the model
  output = model.predict(input_vector)

  #print("Predicted class:", output[0])
  return output[0]

#pip install streamlit
import streamlit as st

def main():
  st.title("Medical Text Classifier web App")

#!pip install streamlit
import streamlit as st

def main():
  st.title("Medical Text Classifier web App")

  user_input = st.text_area("Enter patient diagnosis note:")

  diagnosis_class = ''

# creating a button for prediction
  if st.button('classify the input'):
    diagnosis_class = text_classification(user_input)

  st.success(diagnosis_class)

if __name__ == '__main__':
  main()